#include <WiFi.h>
#include <PubSubClient.h>

// ==========================
// Configurações Wi-Fi
// ==========================
const char* ssid     = "Wokwi-GUEST";
const char* password = "";

// ==========================
// Configurações MQTT (broker TCP HiveMQ)
// ==========================
const char* mqtt_server = "broker.hivemq.com";
const char* mqtt_topic_pub     = "reservatorio/nivel";
const char* mqtt_topic_alerta  = "reservatorio/alerta";

WiFiClient espClient;
PubSubClient client(espClient);

// ==========================
// Pinos do sensor e atuadores00
// ==========================
#define TRIG_PIN    5
#define ECHO_PIN   18
#define BUZZER_PIN 21
#define LED_CHEIO  13
#define LED_MEDIO  12
#define LED_VAZIO  14

long duration;
int  distance;
bool alertaEnviado = false;

void setup() {
  Serial.begin(115200);

  // configura pinos
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
  pinMode(BUZZER_PIN, OUTPUT);
  pinMode(LED_CHEIO, OUTPUT);
  pinMode(LED_MEDIO, OUTPUT);
  pinMode(LED_VAZIO, OUTPUT);

  digitalWrite(BUZZER_PIN, LOW);

  // conecta Wi-Fi
  WiFi.begin(ssid, password);
  Serial.print("Conectando WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(300);
    Serial.print(".");
  }
  Serial.println(" conectado!");
  Serial.print("IP: ");
  Serial.println(WiFi.localIP());

  // configura MQTT
  client.setServer(mqtt_server, 1883);
}

void reconnectMQTT() {
  while (!client.connected()) {
    Serial.print("Tentando MQTT...");
    if (client.connect("ESP32Reservatorio")) {
      Serial.println("OK");
    } else {
      Serial.print("falhou, rc=");
      Serial.print(client.state());
      Serial.println(" tentando em 3s");
      delay(3000);
    }
  }
}

void loop() {
  if (!client.connected()) {
    reconnectMQTT();
  }
  client.loop();

  // dispara ultrassom
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);

  // mede pulso (timeout 30 ms)
  duration = pulseIn(ECHO_PIN, HIGH, 30000);

  if (duration == 0) {
    distance = -1;
    Serial.println("Sem leitura");

    // Apaga todos os LEDs e buzzer se não houve leitura válida
    digitalWrite(LED_CHEIO, LOW);
    digitalWrite(LED_MEDIO, LOW);
    digitalWrite(LED_VAZIO, LOW);
    digitalWrite(BUZZER_PIN, LOW);

    if (alertaEnviado) {
      client.publish(mqtt_topic_alerta, "");  // limpa alerta
      alertaEnviado = false;
    }

  } else {
    distance = duration * 0.034 / 2;
    Serial.print("Distância: ");
    Serial.print(distance);
    Serial.println(" cm");

    // publica no tópico de nível
    char buf[8];
    snprintf(buf, sizeof(buf), "%d", distance);
    client.publish(mqtt_topic_pub, buf);

    // lógica de LEDs e buzzer
    if (distance >= 0 && distance <= 9) {  // VERDE
      digitalWrite(LED_CHEIO, HIGH);
      digitalWrite(LED_MEDIO, LOW);
      digitalWrite(LED_VAZIO, LOW);
      digitalWrite(BUZZER_PIN, LOW);
      if (alertaEnviado) {
        client.publish(mqtt_topic_alerta, "");
        alertaEnviado = false;
      }
    } 
    else if (distance >= 10 && distance <= 19) {  // AMARELO
      digitalWrite(LED_CHEIO, LOW);
      digitalWrite(LED_MEDIO, HIGH);
      digitalWrite(LED_VAZIO, LOW);
      digitalWrite(BUZZER_PIN, LOW);
      if (alertaEnviado) {
        client.publish(mqtt_topic_alerta, "");
        alertaEnviado = false;
      }
    } 
    else if (distance >= 20) {  // VERMELHO
      digitalWrite(LED_CHEIO, LOW);
      digitalWrite(LED_MEDIO, LOW);
      digitalWrite(LED_VAZIO, HIGH);
      digitalWrite(BUZZER_PIN, HIGH);

      if (!alertaEnviado) {
        client.publish(mqtt_topic_alerta, "ALERTA: nível baixo!");
        alertaEnviado = true;
      }
    }
  }

delay(500);
}
